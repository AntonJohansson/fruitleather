# The Minkowski metric and Hodge operator
```
type NumberSet(x): "\mathbb{$x}";
type DifferentialForm(x): "\dd{$x}";

var t: DifferentialForm;
var x: DifferentialForm;
var y: DifferentialForm;
var z: DifferentialForm;

var R: NumberSet;
```

```
// int_a^b \dd{x}
// int_\gamma \dd{l}
// int_\gamma \dd{l}
//prefixunaryop int;
```

```
op *(a: DifferentialForm, b: DifferentialForm) -> DifferentialForm: "\wedge";
op .(a: DifferentialForm, b: DifferentialForm) -> Number: "\cdot";
op _(a: DifferentialForm, b: Number) -> DifferentialForm: "";
op *(a: Number, b: Number) -> Number: "";
op +(a: Number, b: Number) -> Number: "";
op -(a: Number, b: Number) -> Number: "";
op /(a: Number, b: Number) -> Number: "";
op ^(a: Number, b: Number) -> Number: "";
op ^(a: Matrix, b: Number) -> Matrix: "";
op +(a: Matrix, b: Matrix) -> Matrix: "";
op *(a: Vector, b: Vector) -> Vector: "\times";
op _(a: Vector, b: Number) -> Vector: "";
op .(a: Vector, b: Vector) -> Number: "\cdot";
op *(a: Matrix, b: Vector) -> Vector: "";
```

Working in `R^4` with the 1-forms `t,x,y,z` we have the Minkowski metric
```
mu_1 = [1, 0, 0, 0;
        0,-1, 0, 0;
        0, 0,-1, 0;
        0, 0, 0,-1];
```
now what's the inner product between the 2-forms ordered as `t*x, t*y, t*z, x*z, y*z, x*z`? Starting with the inner product between like elements (using `S_2 = {[1], [1,2]}`)
```
(t*x).(t*x) &= sum(s,S_2) {sgn(s) * prod(k,1,m) {x_(i_k) . x_(j_s(k))}} \
        &= (t.t)*(x.x) - (t.x)*(x.t) \
        &= 1*(-1) - 0 = -1;
```
//similarly `<t*y,t*y> = <t*z,t*z> = -1` due to symmetry. Then for off-diagonal elements
//```
//<t*x, t*y> = <t,t>*<x,y> - <t,y>*<x,t> = 1*0 - 0*0 = 0;
//```
//and likewise `<t*y,t*z> = <t*x,t*z> = 0`. Now for the spatial dimensions
//```
//<x*y,x*y> = <x,x>*<y,y> - <x,y>*<y,x> = -1*-1 - 0*0 = 1;
//```
//and `<y*z,y*z> = <x*z, x*z> = 1`. For off-diagonal spatial dimensions
//```
//<x*y,x*z> = <x,x>*<y,z> - <x,z>*<y,x> = -1*0 - 0*0 = 0;
//```
//and likewise for the other off-diagonal spatial dimensions. In summary the inner-product is 0 between different elements and 1 between like spatial elements and `-1` for like 2-forms containing a `t`. All in all
//```
//mu_2 = [-1,  0,  0, 0, 0, 0;
//         0, -1,  0, 0, 0, 0;
//         0,  0, -1, 0, 0, 0;
//         0,  0,  0, 1, 0, 0;
//         0,  0,  0, 0, 1, 0;
//         0,  0,  0, 0, 0, 1];
//```
//Now what about 3-forms? Here we need `S_3 = {[1], [1,2], [1,3], [2,3], [1,2,3], [1,3,2]}` and get
//```
//<x*y*z,x*y*z>
//&= <x*x>*<y*y>*<z*z> - <x*y>*<y*x>*<z*z> \
//&- <x*z>*<y*y>*<z*x> - <x*x>*<y*z>*<z*y> \
//&+ <x*z>*<y*x>*<z*y> + <x*y>*<y*z>*<z*x> \
//&= -1*-1*-1 - 0 - 0 - 0 - 0 - 0 = -1;
//<t*x*y,t*x*y> &= 1;
//<t*x*y,t*x*z> &= 0;
//```
//and the rest follow the same pattern via symmetry. All in all, ordering our basis as
//`x*y*z, t*x*y, t*y*z, t*x*z`
//```
//mu_3 = [-1, 0, 0, 0;
//         0, 1, 0, 0;
//         0, 0, 1, 0;
//         0, 0, 0, 1];
//```
//
//Finally, we only have a single 4-form, using
//```
//S_4 = {&[1],\
//       &[1,2], [1,3], [1,4], [2,3], [2,4], [3,4],\
//       &[1,2]*[3,4], [1,3]*[2,4], [1,4]*[2,3],\
//       &[1,2,3], [1,3,2], [2,3,4], [2,4,3], [3,4,1], [3,1,4], [4,1,2], [4,2,1],\
//       &[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2]};
//```
//then
//```
//&<t*x*y*z, t*x*y*z> \
//    &= <t,t>*<x,x>*<y,y>*<z,z> \
//
//    &- <t,x>*<x,t>*<y,y>*<z,z> - <t,y>*<x,x>*<y,t>*<z,z> \
//    &- <t,z>*<x,x>*<y,y>*<z,t> - <t,t>*<x,y>*<y,x>*<z,z> \
//    &- <t,t>*<x,z>*<y,y>*<z,x> - <t,t>*<x,x>*<y,z>*<z,y> \
//
//    &+ <t,x>*<x,t>*<y,z>*<z,y> + <t,y>*<x,z>*<y,t>*<z,x> \
//    &+ <t,z>*<x,y>*<y,x>*<z,t> \
//
//    &+ <t,y>*<x,t>*<y,x>*<z,z> + <t,x>*<x,y>*<y,t>*<z,z> \
//    &+ <t,t>*<x,z>*<y,x>*<z,y> + <t,t>*<x,y>*<y,z>*<z,x> \
//    &+ <t,z>*<x,x>*<y,t>*<z,y> + <t,y>*<x,x>*<y,z>*<z,t> \
//    &+ <t,z>*<x,t>*<y,y>*<z,x> + <t,x>*<x,z>*<y,y>*<z,t> \
//
//    &- <t,z>*<x,t>*<y,x>*<z,y> - <t,y>*<x,t>*<y,z>*<z,x> \
//    &- <t,z>*<x,y>*<y,t>*<z,x> - <t,x>*<x,z>*<y,t>*<z,y> \
//    &- <t,y>*<x,z>*<y,x>*<z,t> - <t,x>*<x,y>*<y,z>*<z,t> \
//    &= 1*-1*-1*-1 - 0 = -1;
//```
//so
//```
//mu_4 = -1;
//```
//
```
//var t: Test;
v_i = [1,2,3];
v_j = [3,4,5];
v_k = v_i*v_j;
l = v_i . v_j;

a = [1,2;3,4]^2;
a = c + d;

v_o = d * v_k;

//t = y;
//(a+b)^2;
//(1+2)*3;
//3*(1+2);
//1*(-2);
//d = g;
//d = [1, 2; 3, 4]^2;
//d = f;
//1*2+1*-1*-1*-1 - 0 = -1;
//c = a*b;
//(a+1)^(b+c);
//(a+b)/(c+d);
```
